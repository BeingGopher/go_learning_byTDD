# 20250120算法留痕+贪心算法

## [455. 分发饼干](https://leetcode.cn/problems/assign-cookies/)

这一题其实很简单，但自己不知道怎么回事，对于双指针的更新就是没拿捏住。

```go
func findContentChildren(g []int, s []int) int {
    sort.Ints(g) // 对胃口值排序
    sort.Ints(s) // 对饼干大小排序

    ans := 0
    i, j := 0, 0 // i 是胃口值的索引，j 是饼干大小的索引

    for i < len(g) && j < len(s) {
        if s[j] >= g[i] { // 如果当前饼干可以满足当前孩子的胃口
            ans++       // 满足一个孩子
            i++         // 移动到下一个孩子
        }
        j++ // 无论是否满足，都移动到下一个饼干
    }

    return ans
}
```

## [376. 摆动序列](https://leetcode.cn/problems/wiggle-subsequence/)

这一题难度挺大，自己一开始就是想着维护一个差值数组，只要这个差值数组满足一正一负或者一负一正即可，但是这个情形对于所有的情况没法一一满足。

并且这里有一个删减数组元素得到满足的子数组的操作，这里就完全没理解。

```go
func wiggleMaxLength(nums []int) int {
    if len(nums) == 0 {
        return 0
    }

    // 初始化摆动序列长度为1（至少包含第一个元素）
    length := 1
    // 初始化前一个差值为0
    prevDiff := 0

    for i := 1; i < len(nums); i++ {
        // 当前差值
        currDiff := nums[i] - nums[i-1]

        // 如果当前差值不为0，并且与前一个差值的正负关系不同，则构成摆动
        if currDiff != 0 && (prevDiff == 0 || (currDiff > 0) != (prevDiff > 0)) {
            length++
            prevDiff = currDiff
        }
    }

    return length
}
```

这里的更新思路就是只要当前差值不为0，并且与前一个正负关系不同，就构成摆动。答案自增1。

具体情况准备看视频。

## [53. 最大子数组和](https://leetcode.cn/problems/maximum-subarray/)

这一题自己只想到了暴力解法，不过go版本运行会超时。只循环一次的解法就是在循环的过程中就更新答案。

贪心思路如下：

求和，如果需要当前元素大于求和后元素的，直接更新求和为当前元素，接着继续遍历。

```go
func maxSubArray(nums []int) int {
    if len(nums) == 0 {
        return 0 // 或者根据需求抛出错误
    }

    ans := math.MinInt
    currentSum := 0

    for _, num := range nums {
        currentSum = max(currentSum+num, num) // 如果当前和加上新数字不如新数字本身大，就重新开始
        ans = max(ans, currentSum)           // 更新最大子数组和
    }

    return ans
}

func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}
```


